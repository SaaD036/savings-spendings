{"map":"{\"version\":3,\"file\":\"utils.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/utils.ts\"],\"names\":[],\"mappings\":\"AAMA,MAAM,UAAU,MAAM,CAAC,SAAkB,EAAE,OAAe;IACxD,IAAI,CAAC,SAAS,EAAE;QACd,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;KAC1B;AACH,CAAC;AAED,MAAM,UAAU,QAAQ,CAAC,GAAW,EAAE,IAAY;IAChD,OAAO,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;AACzD,CAAC;AAED,MAAM,UAAU,OAAO,CAAC,GAAQ,EAAE,IAAY;IAC5C,IAAI,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC;QAAE,OAAO,GAAG,CAAC,IAAI,CAAC,CAAC;AAC5C,CAAC;AAED,MAAM,UAAU,OAAO,CAAC,GAAQ,EAAE,IAAY;IAC5C,IAAI,KAAK,GAAG,GAAG,CAAC;IAChB,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAE9B,KAAK,CAAC,IAAI,CAAC,UAAA,IAAI;QACb,KAAK,GAAG,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAE7B,sDAAsD;QACtD,kDAAkD;QAClD,OAAO,OAAO,KAAK,KAAK,KAAK,CAAC,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,OAAO,KAAK,CAAC;AACf,CAAC;AAED,MAAM,UAAU,gBAAgB,CAC9B,QAAmB;IAEnB,IAAI,KAAuC,CAAC;IAE5C,QAAQ,QAAQ,CAAC,IAAI,EAAE;QACrB,KAAK,MAAM,CAAC;QACZ,KAAK,MAAM,CAAC;QACZ,KAAK,QAAQ;YACX,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;YACvB,MAAM;QACR,KAAK,QAAQ;YACX,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAC/B,MAAM;QACR;YACE,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;KAC9D;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AACD;;GAEG;AACH,MAAM,UAAU,eAAe,CAAC,MAAc;IAC5C,gEAAgE;IAChE,0EAA0E;IAC1E,mEAAmE;IACnE,8DAA8D;IAC9D,0CAA0C;IAC1C,IAAI,KAAK,GAAG,MAAM,CAAC;IACnB,OAAO,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;QACvB,IAAM,KAAK,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;QAC/B,IAAI,KAAK,CAAC,KAAK,CAAC,KAAK,MAAM,EAAE;YAC3B,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;SAC5B;aAAM;YACL,KAAK;gBACH,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC;oBACtB,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;YACnD,MAAM;SACP;KACF;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAED,MAAM,UAAU,WAAW,CACzB,IAAY,EACZ,KAAoB,EACpB,MAAyB;IAEzB,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;QACtC,OAAO,KAAK,CAAC;KACd;IAED,IAAI,CAAC,MAAM,EAAE;QACX,OAAO,IAAI,CAAC;KACb;IAED,OAAU,MAAM,CAAC,IAAI,SAAI,IAAI,MAAG,CAAC;AACnC,CAAC\"}","code":"export function assert(condition, message) {\r\n    if (!condition) {\r\n        throw new Error(message);\r\n    }\r\n}\r\nexport function contains(obj, prop) {\r\n    return Object.prototype.hasOwnProperty.call(obj, prop);\r\n}\r\nexport function safeGet(obj, prop) {\r\n    if (contains(obj, prop))\r\n        return obj[prop];\r\n}\r\nexport function deepGet(obj, path) {\r\n    var value = obj;\r\n    var props = path.split('.');\r\n    props.some(function (prop) {\r\n        value = safeGet(value, prop);\r\n        // By using \"some\" instead of \"forEach\", we can return\r\n        // true whenever we want to break out of the loop.\r\n        return typeof value === void 0;\r\n    });\r\n    return value;\r\n}\r\nexport function astValueToNative(astValue) {\r\n    var value;\r\n    switch (astValue.type) {\r\n        case 'bool':\r\n        case 'null':\r\n        case 'string':\r\n            value = astValue.value;\r\n            break;\r\n        case 'number':\r\n            value = Number(astValue.value);\r\n            break;\r\n        default:\r\n            throw new Error('Unsupported value type in WHERE clause.');\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * Adapted from: https://github.com/firebase/firebase-ios-sdk/blob/14dd9dc2704038c3bf702426439683cee4dc941a/Firestore/core/src/firebase/firestore/util/string_util.cc#L23-L40\r\n */\r\nexport function prefixSuccessor(prefix) {\r\n    // We can increment the last character in the string and be done\r\n    // unless that character is 255 (0xff), in which case we have to erase the\r\n    // last character and increment the previous character, unless that\r\n    // is 255, etc. If the string is empty or consists entirely of\r\n    // 255's, we just return the empty string.\r\n    var limit = prefix;\r\n    while (limit.length > 0) {\r\n        var index = limit.length - 1;\r\n        if (limit[index] === '\\xff') {\r\n            limit = limit.slice(0, -1);\r\n        }\r\n        else {\r\n            limit =\r\n                limit.substr(0, index) +\r\n                    String.fromCharCode(limit.charCodeAt(index) + 1);\r\n            break;\r\n        }\r\n    }\r\n    return limit;\r\n}\r\nexport function nameOrAlias(name, alias, aggrFn) {\r\n    if (alias !== null && alias.length > 0) {\r\n        return alias;\r\n    }\r\n    if (!aggrFn) {\r\n        return name;\r\n    }\r\n    return aggrFn.name + \"(\" + name + \")\";\r\n}\r\n//# sourceMappingURL=utils.js.map","dts":{"name":"C:/www/npm-packages/fire-sql/dist/types/utils.d.ts","writeByteOrderMark":false,"text":"import { SQL_Value, SQL_AggrFunction } from 'node-sqlparser';\r\nexport declare type DocumentData = {\r\n    [field: string]: any;\r\n};\r\nexport declare type ValueOf<T> = T[keyof T];\r\nexport declare function assert(condition: boolean, message: string): void;\r\nexport declare function contains(obj: object, prop: string): boolean;\r\nexport declare function safeGet(obj: any, prop: string): any;\r\nexport declare function deepGet(obj: any, path: string): any;\r\nexport declare function astValueToNative(astValue: SQL_Value): boolean | string | number | null;\r\n/**\r\n * Adapted from: https://github.com/firebase/firebase-ios-sdk/blob/14dd9dc2704038c3bf702426439683cee4dc941a/Firestore/core/src/firebase/firestore/util/string_util.cc#L23-L40\r\n */\r\nexport declare function prefixSuccessor(prefix: string): string;\r\nexport declare function nameOrAlias(name: string, alias: string | null, aggrFn?: SQL_AggrFunction): string;\r\n"}}
