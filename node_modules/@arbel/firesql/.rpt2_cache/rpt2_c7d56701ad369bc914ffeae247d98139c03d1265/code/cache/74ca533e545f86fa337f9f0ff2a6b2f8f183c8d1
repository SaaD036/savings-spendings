{"map":"{\"version\":3,\"file\":\"firesql.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/firesql.ts\"],\"names\":[],\"mappings\":\"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\"}","code":"import * as tslib_1 from \"tslib\";\r\nimport { parse as parseSQL } from 'node-sqlparser';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport { assert } from './utils';\r\nimport { select_ } from './select';\r\n// Polyfills\r\nimport 'core-js';\r\nexport var DOCUMENT_KEY_NAME = '__name__';\r\nvar FireSQL = /** @class */ (function () {\r\n    function FireSQL(refOrOptions, options) {\r\n        this._options = options;\r\n        if (typeof refOrOptions === 'object') {\r\n            if (refOrOptions instanceof firebase.firestore.DocumentReference) {\r\n                this._ref = refOrOptions;\r\n            }\r\n            else if (refOrOptions instanceof firebase.firestore.Firestore) {\r\n                this._ref = refOrOptions.doc('/');\r\n            }\r\n            else if (!options) {\r\n                this._options = refOrOptions;\r\n            }\r\n            else {\r\n                throw new Error('With options as the second parameter, the first parameter ' +\r\n                    'needs to be a path string or a Firestore reference.');\r\n            }\r\n        }\r\n        else {\r\n            if (typeof refOrOptions === 'string') {\r\n                this._path = refOrOptions;\r\n            }\r\n        }\r\n        if (!this._options) {\r\n            this._options = options || {};\r\n        }\r\n        if (!this._ref) {\r\n            try {\r\n                this._getRef();\r\n            }\r\n            catch (err) {\r\n                // The default Firebase app hasn't been initialized yet.\r\n                // No problem, we'll try again when the user launches\r\n                // the first query.\r\n            }\r\n        }\r\n    }\r\n    Object.defineProperty(FireSQL.prototype, \"ref\", {\r\n        get: function () {\r\n            return this._getRef();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FireSQL.prototype, \"firestore\", {\r\n        get: function () {\r\n            return this._getRef().firestore;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FireSQL.prototype, \"options\", {\r\n        get: function () {\r\n            return this._options;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    FireSQL.prototype.query = function (sql, options) {\r\n        if (options === void 0) { options = {}; }\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var ast;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                assert(typeof sql === 'string' && sql.length > 0, 'query() expects a non-empty string.');\r\n                ast = parseSQL(sql);\r\n                if (ast.type === 'select') {\r\n                    return [2 /*return*/, select_(this._getRef(), ast, tslib_1.__assign({}, this._options, options))];\r\n                }\r\n                else {\r\n                    throw new Error(\"\\\"\" + ast.type.toUpperCase() + \"\\\" statements are not supported.\");\r\n                }\r\n                return [2 /*return*/];\r\n            });\r\n        });\r\n    };\r\n    FireSQL.prototype._getRef = function () {\r\n        if (!this._ref) {\r\n            try {\r\n                var firestore = firebase.firestore();\r\n                this._ref = firestore.doc(this._path !== void 0 ? this._path : '/');\r\n                delete this._path;\r\n            }\r\n            catch (err) {\r\n                console.error(err);\r\n                throw new Error('The default Firebase app has not been initialized yet.');\r\n            }\r\n        }\r\n        return this._ref;\r\n    };\r\n    FireSQL.prototype.toJSON = function () {\r\n        return {\r\n            ref: this._getRef(),\r\n            options: this._options\r\n        };\r\n    };\r\n    return FireSQL;\r\n}());\r\nexport { FireSQL };\r\n/**\r\n * @deprecated Class FirestoreSQL has been renamed FireSQL\r\n */\r\nvar FirestoreSQL = /** @class */ (function (_super) {\r\n    tslib_1.__extends(FirestoreSQL, _super);\r\n    function FirestoreSQL(ref) {\r\n        var _this = this;\r\n        console.warn('DEPRECATED: Class FirestoreSQL has been renamed FireSQL.\\n' +\r\n            'Using \"FirestoreSQL\" will stop working in future releases, update your code accordingly.');\r\n        _this = _super.call(this, ref) || this;\r\n        return _this;\r\n    }\r\n    return FirestoreSQL;\r\n}(FireSQL));\r\nexport { FirestoreSQL };\r\n//# sourceMappingURL=firesql.js.map","dts":{"name":"/mnt/c/www/npm-packages/fire-sql/dist/types/firesql.d.ts","writeByteOrderMark":false,"text":"import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport { DocumentData } from './utils';\r\nimport 'core-js';\r\nexport declare const DOCUMENT_KEY_NAME = \"__name__\";\r\nexport declare class FireSQL {\r\n    private _ref?;\r\n    private _path?;\r\n    private _options;\r\n    constructor(refOrOptions?: FirestoreOrDocOrOptions, options?: FireSQLOptions);\r\n    readonly ref: firebase.firestore.DocumentReference;\r\n    readonly firestore: firebase.firestore.Firestore;\r\n    readonly options: FireSQLOptions;\r\n    query(sql: string, options?: QueryOptions): Promise<DocumentData[]>;\r\n    query<T>(sql: string, options?: QueryOptions): Promise<T[]>;\r\n    private _getRef;\r\n    toJSON(): object;\r\n}\r\nexport interface FireSQLOptions {\r\n    includeId?: boolean | string;\r\n}\r\nexport interface QueryOptions extends FireSQLOptions {\r\n}\r\nexport declare type FirestoreOrDocument = string | firebase.firestore.Firestore | firebase.firestore.DocumentReference;\r\nexport declare type FirestoreOrDocOrOptions = FirestoreOrDocument | FireSQLOptions;\r\n/**\r\n * @deprecated Class FirestoreSQL has been renamed FireSQL\r\n */\r\nexport declare class FirestoreSQL extends FireSQL {\r\n    constructor(ref?: string | firebase.firestore.Firestore | firebase.firestore.DocumentReference);\r\n}\r\n"}}
