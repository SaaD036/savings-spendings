{"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/rx/index.ts\"],\"names\":[],\"mappings\":\"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\"}","code":"import * as tslib_1 from \"tslib\";\r\nimport { parse as parseSQL } from 'node-sqlparser';\r\nimport { combineLatest } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { collectionData } from 'rxfire/firestore';\r\nimport { FireSQL, DOCUMENT_KEY_NAME } from '../firesql';\r\nimport { SelectOperation } from '../select';\r\nimport { assert, contains } from '../utils';\r\nFireSQL.prototype.rxQuery = function (sql, options) {\r\n    assert(typeof sql === 'string' && sql.length > 0, 'rxQuery() expects a non-empty string.');\r\n    var ast = parseSQL(sql);\r\n    assert(ast.type === 'select', 'Only SELECT statements are supported.');\r\n    return rxSelect(this._getRef(), ast, tslib_1.__assign({}, this._options, options));\r\n};\r\nfunction rxSelect(ref, ast, options) {\r\n    var selectOp = new SelectOperation(ref, ast, options);\r\n    var queries = selectOp.generateQueries_();\r\n    if (ast._next) {\r\n        assert(ast._next.type === 'select', ' UNION statements are only supported between SELECTs.');\r\n        // This is the UNION of 2 SELECTs, so lets process the second\r\n        // one and merge their queries\r\n        queries = queries.concat(selectOp.generateQueries_(ast._next));\r\n        // FIXME: The SQL parser incorrectly attributes ORDER BY to the second\r\n        // SELECT only, instead of to the whole UNION. Find a workaround.\r\n    }\r\n    var idField;\r\n    var keepIdField;\r\n    if (selectOp._includeId === true) {\r\n        idField = DOCUMENT_KEY_NAME;\r\n        keepIdField = true;\r\n    }\r\n    else if (typeof selectOp._includeId === 'string') {\r\n        idField = selectOp._includeId;\r\n        keepIdField = true;\r\n    }\r\n    else {\r\n        idField = DOCUMENT_KEY_NAME;\r\n        keepIdField = false;\r\n    }\r\n    var rxData = combineLatest(queries.map(function (query) { return collectionData(query, idField); }));\r\n    return rxData.pipe(map(function (results) {\r\n        // We have an array of results (one for each query we generated) where\r\n        // each element is an array of documents. We need to flatten them.\r\n        var documents = [];\r\n        var seenDocuments = {};\r\n        for (var _i = 0, results_1 = results; _i < results_1.length; _i++) {\r\n            var docs = results_1[_i];\r\n            for (var _a = 0, docs_1 = docs; _a < docs_1.length; _a++) {\r\n                var doc = docs_1[_a];\r\n                // Note: for now we're only allowing to query a single collection, but\r\n                // if at any point we change that (for example with JOINs) we'll need to\r\n                // use the full document path here instead of just its ID\r\n                if (!contains(seenDocuments, doc[idField])) {\r\n                    seenDocuments[doc[idField]] = true;\r\n                    if (!keepIdField) {\r\n                        delete doc[idField];\r\n                    }\r\n                    documents.push(doc);\r\n                }\r\n            }\r\n        }\r\n        return documents;\r\n    }), map(function (documents) {\r\n        return selectOp.processDocuments_(queries, documents);\r\n    }));\r\n}\r\n//# sourceMappingURL=index.js.map","dts":{"name":"/mnt/c/www/npm-packages/fire-sql/dist/types/rx/index.d.ts","writeByteOrderMark":false,"text":"import { Observable } from 'rxjs';\r\nimport { DocumentData } from '../utils';\r\ndeclare module '../firesql' {\r\n    interface FireSQL {\r\n        rxQuery(sql: string, options?: QueryOptions): Observable<DocumentData[]>;\r\n        rxQuery<T>(sql: string, options?: QueryOptions): Observable<T[]>;\r\n    }\r\n    /**\r\n     * @deprecated\r\n     */\r\n    interface FirestoreSQL {\r\n        rxQuery(sql: string, options?: QueryOptions): Observable<DocumentData[]>;\r\n        rxQuery<T>(sql: string, options?: QueryOptions): Observable<T[]>;\r\n    }\r\n}\r\n"}}
